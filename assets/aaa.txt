import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:lottie/lottie.dart';
import '../../controllers/home_controller.dart';
import '../../controllers/fd_plans_controller.dart';
import '../components/custom_appbar.dart';
import '../../utils/colors.dart';
import 'all_fd_plans_page.dart';
import 'trending_plans_page.dart';
import 'goal_based_plans_page.dart';

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    final HomeController homeController = Get.find<HomeController>();
    final FDPlansController fdController = Get.put(FDPlansController());

    return Scaffold(
      appBar: CustomAppBar(title: 'Dhankuber'),
      body: Obx(() => SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Notification Tab
              if (homeController.notifications.isNotEmpty)
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Latest Updates',
                      style: Theme.of(context).textTheme.headlineLarge?.copyWith(
                        fontFamily: 'Poppins',
                        color: AppColors.primaryText,
                      ),
                    ),
                    const SizedBox(height: 12),
                    SizedBox(
                      height: 40,
                      child: ListView.builder(
                        scrollDirection: Axis.horizontal,
                        itemCount: homeController.notifications.length,
                        itemBuilder: (context, index) {
                          final notification = homeController.notifications[index];
                          return Container(
                            margin: const EdgeInsets.only(right: 8),
                            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            decoration: BoxDecoration(
                              color: AppColors.accentLightGreen,
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: Text(
                              notification,
                              style: TextStyle(
                                fontFamily: 'OpenSans',
                                color: AppColors.secondaryBrand,
                                fontSize: 14,
                              ),
                            ),
                          );
                        },
                      ),
                    ),
                  ],
                ),
              const SizedBox(height: 24),

              // Explore All FD Plans Card
              _buildStyledCard(
                context,
                title: 'Explore All FD Plans',
                subtitle: 'Discover Fixed Deposits from top banks',
                gradient: LinearGradient(
                  colors: [AppColors.primaryBrand, const Color(0xFFFF8F00)],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
                lottieAsset: 'assets/lottie/money_growth.json',
                onTap: () => Get.to(() => const AllFDPlansPage()),
              ),

              const SizedBox(height: 16),

              // Trending Plans Card
              _buildStyledCard(
                context,
                title: 'Trending FD Plans',
                subtitle: fdController.trendingPlans.isNotEmpty
                    ? '${fdController.trendingPlans.first['bank']} - ${fdController.trendingPlans.first['plan']}'
                    : 'Discover popular FD plans',
                gradient: LinearGradient(
                  colors: [const Color(0xFFFFF3E0), const Color(0xFFFFE0B2)],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
                lottieAsset: 'assets/lottie/trending.json',
                onTap: () => Get.to(() => const TrendingPlansPage()),
              ),

              const SizedBox(height: 16),

              // Goal-based Plans Card
              _buildStyledCard(
                context,
                title: 'Goal-based FD Plans',
                subtitle: 'Plans for Education, Retirement, Marriage',
                gradient: LinearGradient(
                  colors: [AppColors.accentLightGreen, const Color(0xFFC8E6C9)],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
                lottieAsset: 'assets/lottie/goal.json',
                onTap: () => Get.to(() => const GoalBasedPlansPage()),
              ),
            ],
          ),
        ),
      )),
    );
  }

  Widget _buildStyledCard(
      BuildContext context, {
        required String title,
        required String subtitle,
        required LinearGradient gradient,
        required String lottieAsset,
        required VoidCallback onTap,
      }) {
    return GestureDetector(
      onTap: onTap,
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 200),
        width: double.infinity,
        height: 150,
        margin: const EdgeInsets.only(bottom: 16),
        decoration: BoxDecoration(
          gradient: gradient,
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.15),
              offset: const Offset(0, 4),
              blurRadius: 8,
            ),
          ],
        ),
        child: Stack(
          children: [
            // Lottie Animation (Rounded, Smaller, Centered Vertically, Slightly Right)
            Align(
              alignment: Alignment.centerRight,
              child: Padding(
                padding: const EdgeInsets.only(right: 16),
                child: ClipOval(
                  child: SizedBox(
                    width: 50,
                    height: 50,
                    child: Lottie.asset(lottieAsset, fit: BoxFit.contain),
                  ),
                ),
              ),
            ),
            // Text Content
            Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    title,
                    style: TextStyle(
                      fontFamily: 'Poppins',
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: AppColors.primaryText,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    subtitle,
                    style: TextStyle(
                      fontFamily: 'OpenSans',
                      fontSize: 14,
                      color: AppColors.secondaryText,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
} and import 'package:flutter/foundation.dart'; // Added for kDebugMode
import 'package:get/get.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart'; // Added for date formatting

class HomeController extends GetxController {
  var isLoading = false.obs;
  var recommendedFDs = [].obs;
  var trendingFDs = [].obs;
  var goalBasedFDs = [].obs;
  var notifications = [].obs; // Added for notifications

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Utility function to format the current time
  String _getFormattedTime() {
    final now = DateTime.now();
    final formatter = DateFormat('hh:mm a \'IST\', MMMM dd, yyyy');
    return formatter.format(now);
  }

  @override
  void onInit() {
    super.onInit();
    if (kDebugMode) {
      print('HomeController initialized at ${_getFormattedTime()}');
    }
    fetchData();
  }

  Future<void> fetchData() async {
    isLoading.value = true;
    if (kDebugMode) {
      print('Fetching data at ${_getFormattedTime()}');
    }
    try {
      // Fetch Recommended FDs
      QuerySnapshot recommendedSnapshot = await _firestore
          .collection('fixed_deposits')
          .where('recommended', isEqualTo: true)
          .limit(5)
          .get();
      recommendedFDs.value = recommendedSnapshot.docs.map((doc) => doc.data()).toList();
      if (kDebugMode) {
        print('Recommended FDs fetched: ${recommendedFDs.length} at ${_getFormattedTime()}');
      }

      // Fetch Trending FDs
      QuerySnapshot trendingSnapshot = await _firestore
          .collection('fixed_deposits')
          .orderBy('popularity', descending: true)
          .limit(5)
          .get();
      trendingFDs.value = trendingSnapshot.docs.map((doc) => doc.data()).toList();
      if (kDebugMode) {
        print('Trending FDs fetched: ${trendingFDs.length} at ${_getFormattedTime()}');
      }

      // Fetch Goal-Based FDs
      QuerySnapshot goalBasedSnapshot = await _firestore
          .collection('fixed_deposits')
          .where('goalBased', isEqualTo: true)
          .limit(5)
          .get();
      goalBasedFDs.value = goalBasedSnapshot.docs.map((doc) => doc.data()).toList();
      if (kDebugMode) {
        print('Goal-Based FDs fetched: ${goalBasedFDs.length} at ${_getFormattedTime()}');
      }

      // Fetch Notifications (mock data for now, replace with actual Firestore query)
      // Assuming a 'notifications' collection with fields: title, message, timestamp
      try {
        QuerySnapshot notificationsSnapshot = await _firestore
            .collection('notifications')
            .orderBy('timestamp', descending: true)
            .limit(10)
            .get();
        notifications.value = notificationsSnapshot.docs.map((doc) => doc.data()).toList();
        if (kDebugMode) {
          print('Notifications fetched: ${notifications.length} at ${_getFormattedTime()}');
        }
      } catch (e) {
        if (kDebugMode) {
          print('Error fetching notifications from Firestore: $e at ${_getFormattedTime()}');
        }
        // Mock data as a fallback if Firestore query fails or isn't set up
        notifications.value = [
          {
            'title': 'Welcome to Dhankuber!',
            'message': 'Start exploring fixed deposits to grow your wealth.',
            'timestamp': Timestamp.now(),
          },
          {
            'title': 'New FD Available',
            'message': 'Check out the latest fixed deposit with 8% interest!',
            'timestamp': Timestamp.now(),
          },
        ];
        if (kDebugMode) {
          print('Using mock notifications data: ${notifications.length} items at ${_getFormattedTime()}');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('Error fetching data: $e at ${_getFormattedTime()}');
      }
      Get.snackbar('Error', 'Failed to load data: $e');
    } finally {
      isLoading.value = false;
    }
  }
} home screen ko khali kr do abhi jo data h vo sara uske bad nya data dalna h, appbar me left me app logo dikhe uske aage app name dikhe uske bad right side me ek language change button rhe jha se user app language change kr ske jisme abhi ke liye English, Hindi, Hinglish option rhe aur FD Trial Section icon dalna h  jiske liye alag screen bna dena, thne uske bad ek get advise from experts  button rhe jha se popup open ho jisme connect ka option rhe  fir body me  ek rounded horizontal scrollable panel ho just like instagrams stories jha pr user click krke popup me preview dekh ske jo data fixerra.in se aaye un fds ka fir uske niche Trending fds secttion ho jisme ki horizontal scrollable cards rhe jinme se popular 2 home pr dikhhe fir view all option rhe jha se user trending fds screen pr ja ske, uske bad same type ka goal based fd rhe aur uske niche same type ka all fds rhe, fir all fd plans page, fd booking page, fd details page , goal based fd plans page, trending plans page, fd plans controller ka data hta dena  aur abhi ke liye to inme demo webview dalna h jiske liye url - https://dhan-kuber.com jo meri hi h bad me isme fixerra ki webviews dal denge. baki codes - import 'package:flutter/foundation.dart'; // Added for kDebugMode
import 'package:get/get.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart'; // Added for date formatting

class FDPlansController extends GetxController {
  var isLoading = false.obs;
  var allFDPlans = <Map<String, dynamic>>[].obs; // Explicitly typed
  var trendingPlans = <Map<String, dynamic>>[].obs; // Explicitly typed
  var goalBasedPlans = <Map<String, dynamic>>[].obs; // Explicitly typed
  var filteredPlans = <Map<String, dynamic>>[].obs; // Explicitly typed
  var selectedCategory = ''.obs;
  var selectedGoal = 'Education'.obs;
  var searchQuery = ''.obs;

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Utility function to format the current time
  String _getFormattedTime() {
    final now = DateTime.now();
    final formatter = DateFormat('hh:mm a \'IST\', MMMM dd, yyyy');
    return formatter.format(now);
  }

  @override
  void onInit() {
    super.onInit();
    if (kDebugMode) {
      print('FDPlansController initialized at ${_getFormattedTime()}');
    }
    fetchAllFDPlans();
    fetchTrendingPlans();
    fetchGoalBasedPlans();
    // Initialize filteredPlans with all plans
    filteredPlans.assignAll(allFDPlans);
  }

  Future<void> fetchAllFDPlans() async {
    isLoading.value = true;
    if (kDebugMode) {
      print('Fetching all FD plans at ${_getFormattedTime()}');
    }
    try {
      QuerySnapshot snapshot = await _firestore
          .collection('fixed_deposits')
          .orderBy('interestRate', descending: true)
          .get();
      allFDPlans.value = snapshot.docs
          .map((doc) => doc.data() as Map<String, dynamic>)
          .toList();
      // Update filteredPlans after fetching all plans
      filteredPlans.assignAll(allFDPlans);
      if (kDebugMode) {
        print('All FD plans fetched: ${allFDPlans.length} at ${_getFormattedTime()}');
      }
    } catch (e) {
      if (kDebugMode) {
        print('Error fetching all FD plans: $e at ${_getFormattedTime()}');
      }
      Get.snackbar('Error', 'Failed to load FD plans: $e');
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> fetchTrendingPlans() async {
    isLoading.value = true;
    if (kDebugMode) {
      print('Fetching trending FD plans at ${_getFormattedTime()}');
    }
    try {
      QuerySnapshot snapshot = await _firestore
          .collection('fixed_deposits')
          .where('trending', isEqualTo: true)
          .orderBy('popularity', descending: true)
          .get();
      trendingPlans.value = snapshot.docs
          .map((doc) => doc.data() as Map<String, dynamic>)
          .toList();
      if (kDebugMode) {
        print('Trending FD plans fetched: ${trendingPlans.length} at ${_getFormattedTime()}');
      }
    } catch (e) {
      if (kDebugMode) {
        print('Error fetching trending FD plans: $e at ${_getFormattedTime()}');
      }
      Get.snackbar('Error', 'Failed to load trending FD plans: $e');
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> fetchGoalBasedPlans() async {
    isLoading.value = true;
    if (kDebugMode) {
      print('Fetching goal-based FD plans for goal: ${selectedGoal.value} at ${_getFormattedTime()}');
    }
    try {
      QuerySnapshot snapshot = await _firestore
          .collection('fixed_deposits')
          .where('goal', isEqualTo: selectedGoal.value)
          .orderBy('interestRate', descending: true)
          .get();
      goalBasedPlans.value = snapshot.docs
          .map((doc) => doc.data() as Map<String, dynamic>)
          .toList();
      if (kDebugMode) {
        print('Goal-based FD plans fetched: ${goalBasedPlans.length} at ${_getFormattedTime()}');
      }
    } catch (e) {
      if (kDebugMode) {
        print('Error fetching goal-based FD plans: $e at ${_getFormattedTime()}');
      }
      Get.snackbar('Error', 'Failed to load goal-based FD plans: $e');
    } finally {
      isLoading.value = false;
    }
  }

  void searchPlans(String query) {
    searchQuery.value = query.toLowerCase();
    if (kDebugMode) {
      print('Searching FD plans with query: $query at ${_getFormattedTime()}');
    }
    if (query.isEmpty) {
      filteredPlans.assignAll(allFDPlans);
      if (selectedCategory.value.isNotEmpty) {
        filterPlans(selectedCategory.value);
      }
    } else {
      filteredPlans.value = allFDPlans.where((plan) {
        final bank = (plan['bank'] ?? '').toLowerCase();
        final planName = (plan['plan'] ?? '').toLowerCase();
        return bank.contains(searchQuery.value) || planName.contains(searchQuery.value);
      }).toList();
      if (selectedCategory.value.isNotEmpty) {
        filterPlans(selectedCategory.value);
      }
    }
    if (kDebugMode) {
      print('Search results: ${filteredPlans.length} plans found at ${_getFormattedTime()}');
    }
  }

  void filterPlans(String category) {
    selectedCategory.value = category;
    if (kDebugMode) {
      print('Filtering FD plans by category: $category at ${_getFormattedTime()}');
    }
    if (category.isEmpty) {
      filteredPlans.assignAll(allFDPlans);
      if (searchQuery.value.isNotEmpty) {
        searchPlans(searchQuery.value);
      }
    } else {
      filteredPlans.value = allFDPlans.where((plan) {
        final categories = (plan['categories'] as List<dynamic>?)?.cast<String>() ?? [];
        return categories.contains(category);
      }).toList();
      if (searchQuery.value.isNotEmpty) {
        searchPlans(searchQuery.value);
      }
    }
    if (kDebugMode) {
      print('Filtered plans: ${filteredPlans.length} plans found for category $category at ${_getFormattedTime()}');
    }
  }

  void selectGoal(String goal) {
    selectedGoal.value = goal;
    if (kDebugMode) {
      print('Selected goal: $goal at ${_getFormattedTime()}');
    }
    fetchGoalBasedPlans();
  }

  List<Map<String, dynamic>> getPlansByGoal(String goal) {
    if (kDebugMode) {
      print('Getting plans for goal: $goal at ${_getFormattedTime()}');
    }
    return goalBasedPlans
        .where((plan) => (plan['goal'] ?? '') == goal)
        .toList()
        .cast<Map<String, dynamic>>();
  }
} and import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../controllers/fd_plans_controller.dart';
import '../widgets/fd_card_widget.dart';
import '../components/custom_appbar.dart';
import '../../utils/colors.dart';
import 'fd_details_page.dart';

class AllFDPlansPage extends StatelessWidget {
  const AllFDPlansPage({super.key});

  @override
  Widget build(BuildContext context) {
    final FDPlansController controller = Get.find<FDPlansController>();
    final TextEditingController searchController = TextEditingController();

    return Scaffold(
      appBar: CustomAppBar(title: 'All FD Plans'),
      body: Obx(() => SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Search Bar
              Container(
                decoration: BoxDecoration(
                  color: AppColors.neutralLightGray,
                  borderRadius: BorderRadius.circular(12),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.1),
                      offset: const Offset(0, 2),
                      blurRadius: 6,
                    ),
                  ],
                ),
                child: TextField(
                  controller: searchController,
                  decoration: InputDecoration(
                    hintText: 'Search FD plans...',
                    hintStyle: TextStyle(
                      fontFamily: 'OpenSans',
                      color: AppColors.secondaryText,
                      fontSize: 16,
                    ),
                    prefixIcon: Icon(
                      Icons.search,
                      color: AppColors.secondaryText,
                    ),
                    border: InputBorder.none,
                    contentPadding: const EdgeInsets.symmetric(vertical: 14, horizontal: 16),
                  ),
                  onChanged: (value) => controller.searchPlans(value),
                ),
              ),
              const SizedBox(height: 24),

              // Category Filters
              Row(
                mainAxisAlignment: MainAxisAlignment.start,
                children: [
                  _buildFilterButton(
                    context,
                    'All',
                    controller.selectedCategory.value == '',
                        () => controller.filterPlans(''),
                  ),
                  const SizedBox(width: 8),
                  _buildFilterButton(
                    context,
                    'Tax Saving',
                    controller.selectedCategory.value == 'Tax Saving',
                        () => controller.filterPlans('Tax Saving'),
                  ),
                  const SizedBox(width: 8),
                  _buildFilterButton(
                    context,
                    'Senior Citizen',
                    controller.selectedCategory.value == 'Senior Citizen',
                        () => controller.filterPlans('Senior Citizen'),
                  ),
                ],
              ),
              const SizedBox(height: 24),

              // All FD Plans
              Text(
                'All FD Plans',
                style: Theme.of(context).textTheme.headlineLarge?.copyWith(
                  fontFamily: 'Poppins',
                  color: AppColors.primaryText,
                ),
              ),
              const SizedBox(height: 8),
              controller.filteredPlans.isEmpty
                  ? const Center(child: Text('No plans available'))
                  : ListView.builder(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                itemCount: controller.filteredPlans.length,
                itemBuilder: (context, index) {
                  final plan = controller.filteredPlans[index];
                  return FDCardWidget(
                    plan: plan,
                    isFeatured: true,
                    onTap: () => Get.to(() => FDDetailsPage(plan: plan)),
                  );
                },
              ),
            ],
          ),
        ),
      )),
    );
  }

  Widget _buildFilterButton(BuildContext context, String label, bool isSelected, VoidCallback onTap) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        decoration: BoxDecoration(
          color: isSelected ? AppColors.primaryBrand : AppColors.neutralLightGray,
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              offset: const Offset(0, 2),
              blurRadius: 6,
            ),
          ],
        ),
        child: Text(
          label,
          style: TextStyle(
            fontFamily: 'OpenSans',
            color: isSelected ? Colors.white : AppColors.primaryText,
            fontSize: 14,
            fontWeight: FontWeight.w600,
          ),
        ),
      ),
    );
  }
} and import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../utils/colors.dart';
import '../components/custom_appbar.dart';

class FDBookingPage extends StatelessWidget {
  final Map<String, dynamic> plan;

  const FDBookingPage({super.key, required this.plan});

  @override
  Widget build(BuildContext context) {
    String selectedCategory = plan['category'];
    String selectedTenure = plan['tenure'];

    return Scaffold(
      appBar: CustomAppBar(title: 'Book ${plan['plan']}'),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Book Your Fixed Deposit',
              style: TextStyle(
                fontFamily: 'Poppins',
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: AppColors.primaryText,
              ),
            ),
            const SizedBox(height: 16),
            Text(
              'Bank: ${plan['bank']}',
              style: TextStyle(
                fontFamily: 'OpenSans',
                fontSize: 16,
                color: AppColors.secondaryText,
              ),
            ),
            Text(
              'Plan: ${plan['plan']}',
              style: TextStyle(
                fontFamily: 'OpenSans',
                fontSize: 16,
                color: AppColors.secondaryText,
              ),
            ),
            const SizedBox(height: 24),
            Text(
              'Select Category',
              style: TextStyle(
                fontFamily: 'Poppins',
                fontSize: 16,
                fontWeight: FontWeight.w600,
                color: AppColors.primaryText,
              ),
            ),
            DropdownButton<String>(
              value: selectedCategory,
              isExpanded: true,
              items: ['Standard', 'Tax Saving', 'Senior Citizen']
                  .map((category) => DropdownMenuItem(
                value: category,
                child: Text(
                  category,
                  style: TextStyle(
                    fontFamily: 'OpenSans',
                    fontSize: 16,
                    color: AppColors.primaryText,
                  ),
                ),
              ))
                  .toList(),
              onChanged: (value) {
                if (value != null) selectedCategory = value;
              },
            ),
            const SizedBox(height: 16),
            Text(
              'Select Tenure',
              style: TextStyle(
                fontFamily: 'Poppins',
                fontSize: 16,
                fontWeight: FontWeight.w600,
                color: AppColors.primaryText,
              ),
            ),
            DropdownButton<String>(
              value: selectedTenure,
              isExpanded: true,
              items: ['1 year', '2 years', '3 years', '4 years', '5 years']
                  .map((tenure) => DropdownMenuItem(
                value: tenure,
                child: Text(
                  tenure,
                  style: TextStyle(
                    fontFamily: 'OpenSans',
                    fontSize: 16,
                    color: AppColors.primaryText,
                  ),
                ),
              ))
                  .toList(),
              onChanged: (value) {
                if (value != null) selectedTenure = value;
              },
            ),
            const Spacer(),
            ElevatedButton(
              onPressed: () {
                Get.snackbar(
                  'Success',
                  'FD booked successfully! (Dummy action)',
                  backgroundColor: AppColors.successGreen,
                  colorText: Colors.white,
                );
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.primaryBrand,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
                minimumSize: const Size(double.infinity, 50),
                shadowColor: Colors.black.withOpacity(0.1),
                elevation: 2,
              ),
              child: Text(
                'Confirm Booking',
                style: TextStyle(
                  fontFamily: 'Poppins',
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
} and import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../utils/colors.dart';
import '../components/custom_appbar.dart';
import 'fd_booking_page.dart';

class FDDetailsPage extends StatelessWidget {
  final Map<String, dynamic> plan;

  const FDDetailsPage({super.key, required this.plan});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomAppBar(title: plan['plan']),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              plan['bank'],
              style: TextStyle(
                fontFamily: 'Poppins',
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: AppColors.primaryText,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              plan['plan'],
              style: TextStyle(
                fontFamily: 'Poppins',
                fontSize: 18,
                color: AppColors.secondaryText,
              ),
            ),
            const SizedBox(height: 16),
            _buildDetailRow('Interest Rate', plan['interestRate']),
            _buildDetailRow('Tenure', plan['tenure']),
            _buildDetailRow('Minimum Deposit', plan['minDeposit']),
            _buildDetailRow('Category', plan['category']),
            _buildDetailRow('Goal', plan['goal']),
            const Spacer(),
            ElevatedButton(
              onPressed: () => Get.to(() => FDBookingPage(plan: plan)),
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.primaryBrand,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
                minimumSize: const Size(double.infinity, 50),
                shadowColor: Colors.black.withOpacity(0.1),
                elevation: 2,
              ),
              child: Text(
                'Book This FD',
                style: TextStyle(
                  fontFamily: 'Poppins',
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: TextStyle(
              fontFamily: 'OpenSans',
              fontSize: 16,
              color: AppColors.secondaryText,
            ),
          ),
          Text(
            value,
            style: TextStyle(
              fontFamily: 'Poppins',
              fontSize: 16,
              fontWeight: FontWeight.w600,
              color: AppColors.primaryText,
            ),
          ),
        ],
      ),
    );
  }
} and import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../controllers/fd_plans_controller.dart';
import '../widgets/fd_card_widget.dart';
import '../components/custom_appbar.dart';
import '../../utils/colors.dart';
import 'fd_details_page.dart';

class GoalBasedPlansPage extends StatelessWidget {
  const GoalBasedPlansPage({super.key});

  @override
  Widget build(BuildContext context) {
    final FDPlansController controller = Get.find<FDPlansController>();
    final TextEditingController searchController = TextEditingController();

    return Scaffold(
      appBar: CustomAppBar(title: 'Goal-based FD Plans'),
      body: Obx(() => SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Search Bar
              Container(
                decoration: BoxDecoration(
                  color: AppColors.neutralLightGray,
                  borderRadius: BorderRadius.circular(12),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.1),
                      offset: const Offset(0, 2),
                      blurRadius: 6,
                    ),
                  ],
                ),
                child: TextField(
                  controller: searchController,
                  decoration: InputDecoration(
                    hintText: 'Search goal-based plans...',
                    hintStyle: TextStyle(
                      fontFamily: 'OpenSans',
                      color: AppColors.secondaryText,
                      fontSize: 16,
                    ),
                    prefixIcon: Icon(
                      Icons.search,
                      color: AppColors.secondaryText,
                    ),
                    border: InputBorder.none,
                    contentPadding: const EdgeInsets.symmetric(vertical: 14, horizontal: 16),
                  ),
                  onChanged: (value) => controller.searchPlans(value),
                ),
              ),
              const SizedBox(height: 24),

              // Goal Selector
              Row(
                mainAxisAlignment: MainAxisAlignment.start,
                children: [
                  _buildGoalButton(
                    context,
                    'Education',
                    controller.selectedGoal.value == 'Education',
                        () => controller.selectGoal('Education'),
                  ),
                  const SizedBox(width: 8),
                  _buildGoalButton(
                    context,
                    'Retirement',
                    controller.selectedGoal.value == 'Retirement',
                        () => controller.selectGoal('Retirement'),
                  ),
                  const SizedBox(width: 8),
                  _buildGoalButton(
                    context,
                    'Marriage',
                    controller.selectedGoal.value == 'Marriage',
                        () => controller.selectGoal('Marriage'),
                  ),
                ],
              ),
              const SizedBox(height: 24),

              // Goal-based Plans
              Text(
                '${controller.selectedGoal.value} Plans',
                style: Theme.of(context).textTheme.headlineLarge?.copyWith(
                  fontFamily: 'Poppins',
                  color: AppColors.primaryText,
                ),
              ),
              const SizedBox(height: 8),
              _buildGoalSection(
                context,
                controller,
                controller.selectedGoal.value,
                controller.selectedGoal.value == 'Education'
                    ? AppColors.accentLightGreen
                    : controller.selectedGoal.value == 'Retirement'
                    ? const Color(0xFFFFF3E0)
                    : const Color(0xFFFCE4EC),
              ),
            ],
          ),
        ),
      )),
    );
  }

  Widget _buildGoalButton(BuildContext context, String label, bool isSelected, VoidCallback onTap) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        decoration: BoxDecoration(
          color: isSelected ? AppColors.primaryBrand : AppColors.neutralLightGray,
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              offset: const Offset(0, 2),
              blurRadius: 6,
            ),
          ],
        ),
        child: Text(
          label,
          style: TextStyle(
            fontFamily: 'OpenSans',
            color: isSelected ? Colors.white : AppColors.primaryText,
            fontSize: 14,
            fontWeight: FontWeight.w600,
          ),
        ),
      ),
    );
  }

  Widget _buildGoalSection(BuildContext context, FDPlansController controller, String goal, Color bgColor) {
    final goalPlans = controller.getPlansByGoal(goal);
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: bgColor,
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            goal,
            style: Theme.of(context).textTheme.headlineMedium?.copyWith(
              fontFamily: 'Poppins',
              color: AppColors.primaryText,
            ),
          ),
          const SizedBox(height: 8),
          goalPlans.isEmpty
              ? const Text('No plans available for this goal')
              : ListView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: goalPlans.length,
            itemBuilder: (context, index) {
              final plan = goalPlans[index];
              return FDCardWidget(
                plan: plan,
                onTap: () => Get.to(() => FDDetailsPage(plan: plan)),
              );
            },
          ),
        ],
      ),
    );
  }
} and import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../controllers/fd_plans_controller.dart';
import '../widgets/fd_card_widget.dart';
import '../components/custom_appbar.dart';
import '../../utils/colors.dart';
import 'fd_details_page.dart';

class TrendingPlansPage extends StatelessWidget {
  const TrendingPlansPage({super.key});

  @override
  Widget build(BuildContext context) {
    final FDPlansController controller = Get.find<FDPlansController>();
    final TextEditingController searchController = TextEditingController();

    return Scaffold(
      appBar: CustomAppBar(title: 'Trending FD Plans'),
      body: Obx(() => SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Search Bar
              Container(
                decoration: BoxDecoration(
                  color: AppColors.neutralLightGray,
                  borderRadius: BorderRadius.circular(12),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.1),
                      offset: const Offset(0, 2),
                      blurRadius: 6,
                    ),
                  ],
                ),
                child: TextField(
                  controller: searchController,
                  decoration: InputDecoration(
                    hintText: 'Search trending plans...',
                    hintStyle: TextStyle(
                      fontFamily: 'OpenSans',
                      color: AppColors.secondaryText,
                      fontSize: 16,
                    ),
                    prefixIcon: Icon(
                      Icons.search,
                      color: AppColors.secondaryText,
                    ),
                    border: InputBorder.none,
                    contentPadding: const EdgeInsets.symmetric(vertical: 14, horizontal: 16),
                  ),
                  onChanged: (value) => controller.searchPlans(value),
                ),
              ),
              const SizedBox(height: 24),

              // Trending Plans
              Text(
                'Trending Plans',
                style: Theme.of(context).textTheme.headlineLarge?.copyWith(
                  fontFamily: 'Poppins',
                  color: AppColors.primaryText,
                ),
              ),
              const SizedBox(height: 8),
              controller.trendingPlans.isEmpty
                  ? const Center(child: Text('No trending plans available'))
                  : ListView.builder(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                itemCount: controller.trendingPlans.length,
                itemBuilder: (context, index) {
                  final plan = controller.trendingPlans[index];
                  return FDCardWidget(
                    plan: plan,
                    isTrending: true,
                    onTap: () => Get.to(() => FDDetailsPage(plan: plan)),
                  );
                },
              ),
            ],
          ),
        ),
      )),
    );
  }
} sath mere firestore inme connect h to usko htane ka bhi bta dena kyuki jaise kal indexes bnaye the jo ab syd vo kam nhi aayrenge nye bnane pdenge bsd me use ke hisab se aur abhi use ho rhe to to bta dena